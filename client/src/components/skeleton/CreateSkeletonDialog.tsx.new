import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card, CardContent } from '@/components/ui/card';
import { useWorkspace } from '@/lib/store';
import { CREATOR_TEMPLATES, FRAME_TEMPLATES } from '@/lib/frameLibrary';
import { creatorTemplates, getTemplateCategories, filterTemplatesByCategory, CategoryCreatorTemplate, TemplateCategory } from '@/lib/creatorTemplates';
import { SKELETON_UNITS } from '@/lib/constants';
import { DndContext, DragEndEvent, DragStartEvent, closestCenter, DragOverlay, useDroppable, useDraggable } from '@dnd-kit/core';
import { Textarea } from '@/components/ui/textarea';
import { cn } from '@/lib/utils';
import { nanoid } from 'nanoid';
import { Camera, Video, Smartphone, ShoppingBag, BarChart, Film, Utensils, Gamepad, Tv, ImageIcon, Bike, Home, Flower, Brain, Pencil } from 'lucide-react';

interface CreateSkeletonDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

// Category icon mapping
const getCategoryIcon = (category: TemplateCategory | 'all') => {
  switch(category) {
    case 'all':
      return <ShoppingBag size={18} />;
    case 'Animation':
      return <Pencil size={18} />;
    case 'Automotive':
      return <Bike size={18} />;
    case 'Beauty':
      return <ShoppingBag size={18} />;
    case 'Business':
      return <BarChart size={18} />;
    case 'Cooking':
      return <Utensils size={18} />;
    case 'Education':
      return <Brain size={18} />;
    case 'Entertainment':
      return <Tv size={18} />;
    case 'Filmmaking':
      return <Film size={18} />;
    case 'Finance':
      return <BarChart size={18} />;
    case 'Gaming':
      return <Gamepad size={18} />;
    case 'Gardening':
      return <Flower size={18} />;
    case 'Lifestyle':
      return <Home size={18} />;
    case 'Mental Health':
      return <Brain size={18} />;
    case 'Photography':
      return <ImageIcon size={18} />;
    case 'Sports':
      return <Bike size={18} />;
    case 'Technology':
      return <Smartphone size={18} />;
    default:
      return <ShoppingBag size={18} />;
  }
};

export default function CreateSkeletonDialog({ open, onOpenChange }: CreateSkeletonDialogProps) {
  const [name, setName] = useState('');
  const [videoContext, setVideoContext] = useState('');
  const [selectedCreator, setSelectedCreator] = useState<string | null>(null);
  const [selectedCategory, setSelectedCategory] = useState<TemplateCategory | 'all'>('all');
  const categories = getTemplateCategories();
  const [contentType, setContentType] = useState<'short' | 'long'>('long');
  const { addSkeleton, setActiveSkeletonId, setVideoContext: setStoreVideoContext } = useWorkspace();
  
  // Filter templates based on selected category and content type
  const filteredTemplates = selectedCategory === 'all'
    ? creatorTemplates.filter(t => t.contentTypes.includes(contentType))
    : creatorTemplates.filter(t => t.category === selectedCategory && t.contentTypes.includes(contentType));

  function handleTemplateSubmit(e: React.FormEvent) {
    e.preventDefault();

    // Find the selected template
    const selectedTemplate = CREATOR_TEMPLATES.find(template => template.id === selectedCreator);
    if (!selectedTemplate) return;

    // Create a new skeleton based on the selected template
    const newSkeleton = {
      id: nanoid(),
      name: name || selectedTemplate.name,
      units: selectedTemplate.units,
      frames: [], // Frames will be populated when the skeleton is created
      contentType: contentType,
    };

    // Add the skeleton and set it as active
    const createdSkeleton = addSkeleton(newSkeleton);
    setActiveSkeletonId(createdSkeleton.id);
    
    // Set the video context
    if (videoContext) {
      setStoreVideoContext(createdSkeleton.id, videoContext);
    }

    // Close the dialog
    onOpenChange(false);
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl h-[700px] overflow-hidden flex flex-col">
        <DialogHeader>
          <DialogTitle>Create New Skeleton</DialogTitle>
          <DialogDescription>
            Build a content structure for your video by selecting a template or creating a custom skeleton
          </DialogDescription>
        </DialogHeader>

        <Tabs defaultValue="template" className="flex-1 overflow-hidden flex flex-col">
          <TabsList className="mb-4">
            <TabsTrigger value="template">Use Template</TabsTrigger>
            <TabsTrigger value="custom">Custom Build</TabsTrigger>
          </TabsList>

          <TabsContent value="template" className="flex-1 overflow-hidden flex flex-col">
            <form onSubmit={handleTemplateSubmit} className="space-y-4 flex-1 overflow-hidden flex flex-col">
              <div className="grid gap-4 flex-1 overflow-hidden">
                <div className="grid gap-2">
                  <Label htmlFor="name">Name (Optional)</Label>
                  <Input
                    id="name"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    placeholder="e.g., My YouTube Script"
                    className="touch-target"
                  />
                </div>

                <div className="grid gap-2">
                  <Label htmlFor="video-context">What is this video about?</Label>
                  <Textarea
                    id="video-context"
                    value={videoContext}
                    onChange={(e) => setVideoContext(e.target.value)}
                    placeholder="Describe your video's main topic, goals, and target audience..."
                    className="min-h-[80px] touch-target"
                  />
                </div>

                <div className="grid gap-2 flex-1 overflow-hidden">
                  <div className="flex justify-between items-center">
                    <Label>Choose a Creator Template</Label>
                  </div>
                  
                  <div className="space-y-2 mb-2">
                    <div className="flex justify-between items-center">
                      <div className="flex items-center gap-2">
                        <Label className="text-xs">Content Type:</Label>
                        <div className="flex items-center border rounded-md overflow-hidden">
                          <button
                            type="button"
                            onClick={() => setContentType('short')}
                            className={cn(
                              "flex items-center gap-1 px-2 py-1 text-xs",
                              contentType === 'short'
                                ? "bg-primary text-primary-foreground"
                                : "bg-background hover:bg-muted"
                            )}
                          >
                            <Smartphone size={12} />
                            <span>Short</span>
                          </button>
                          <button
                            type="button"
                            onClick={() => setContentType('long')}
                            className={cn(
                              "flex items-center gap-1 px-2 py-1 text-xs",
                              contentType === 'long'
                                ? "bg-primary text-primary-foreground"
                                : "bg-background hover:bg-muted"
                            )}
                          >
                            <Video size={12} />
                            <span>Long</span>
                          </button>
                        </div>
                      </div>
                      <Label className="text-xs text-muted-foreground">Filter by category:</Label>
                    </div>
                    
                    <div className="flex flex-wrap gap-1">
                      <button
                        type="button"
                        onClick={() => setSelectedCategory('all')}
                        className={cn(
                          "flex items-center gap-1 px-2 py-1 text-xs rounded-full transition-all",
                          selectedCategory === 'all'
                            ? "bg-primary text-primary-foreground shadow-sm"
                            : "bg-muted text-muted-foreground hover:bg-muted/80"
                        )}
                      >
                        <ShoppingBag size={12} />
                        <span>All</span>
                      </button>
                      
                      {categories.map((category) => (
                        <button
                          key={category}
                          type="button"
                          onClick={() => setSelectedCategory(category)}
                          className={cn(
                            "flex items-center gap-1 px-2 py-1 text-xs rounded-full transition-all",
                            selectedCategory === category
                              ? "bg-primary text-primary-foreground shadow-sm" 
                              : "bg-muted text-muted-foreground hover:bg-muted/80"
                          )}
                        >
                          {getCategoryIcon(category)}
                          <span>{category}</span>
                        </button>
                      ))}
                    </div>
                  </div>
                  
